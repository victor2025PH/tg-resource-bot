# ‚úÖ Webhook + Êô∫ËÉΩÂ∫îÁ≠î + Google Sheets + YAMLÂ∫îÁ≠î + ÂÖ≥ÈîÆËØçÊ†áÂáÜÂåñÁâàÊú¨

import asyncio
from aiogram import Bot, Dispatcher, types
import openai
import logging
import yaml
import csv
import datetime
import os
import random
import json
import base64
import gspread
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# ================== Ê†∏ÂøÉÈÖçÁΩÆ ==================
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456"))
GROUP_LINK = os.getenv("GROUP_LINK", "https://t.me/+abc")
VIP_GROUP_LINK = os.getenv("VIP_GROUP_LINK", GROUP_LINK)
GOOGLE_SHEET_NAME = os.getenv("GSHEET_NAME", "resources-data")
key_base64 = os.getenv("GSHEET_KEY_BASE64")

WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = "secret-token"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-bot-url.onrender.com") + WEBHOOK_PATH

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
client = openai.OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)
user_history = {}

# ============ Âä†ËΩΩ YAML ÈóÆÁ≠î ============
with open('qas_multi_lang.yaml', encoding='utf8') as f:
    qas = yaml.safe_load(f)

# ============ Google Sheet ÊéàÊùÉ ============
with open("service_account.json", "wb") as f:
    f.write(base64.b64decode(key_base64))

gc = gspread.service_account(filename="service_account.json")
sheet_resources = gc.open(GOOGLE_SHEET_NAME).worksheet("resources")
sheet_reports = gc.open(GOOGLE_SHEET_NAME).worksheet("reports")
sheet_interactions = gc.open(GOOGLE_SHEET_NAME).worksheet("interactions")

# ============ ÂàÜÁ±ªÈÄªËæë ============
def classify_persona(text):
    text = text.lower()
    if any(word in text for word in ['ËÄÅÊùø', 'ÊãÖ‰øù', 'Êî∂Âçï', 'Â§ßÈ¢ù']):
        return "Â§ßÂÆ¢Êà∑"
    elif any(word in text for word in ['Êé®Âπø', 'ÂπøÂëä', 'ÂºïÊµÅ', 'ËøêËê•']):
        return "Êé®ÂπøÂè∑"
    elif any(word in text for word in ['ÊãõËÅò', 'Â∑•‰∫∫', 'Âè∏Êú∫', '‰∫∫‰∫ã']):
        return "ËµÑÊ∫ê‰∏≠‰ªã"
    return "ÊôÆÈÄöÁî®Êà∑"

def classify_tag(text):
    tags = {
        "ÊãÖ‰øù": ["ÊãÖ‰øù", "ÊäºÈáë", "‰∏≠‰ªã", "‰ø°Áî®"],
        "Êç¢Ê±á": ["Êç¢Ê±á", "Ê±áÁéá", "ËΩ¨Ë¥¶", "USDT", "Â∏Å"],
        "Êî∂Ê¨æ": ["Êî∂Ê¨æ", "Á†Å", "ÈÄöÈÅì", "ÂæÆ‰ø°", "ÊîØ‰ªòÂÆù"]
    }
    for tag, keywords in tags.items():
        if any(k in text for k in keywords):
            return tag
    return "ÂÖ∂ÂÆÉ"

# ============ YAML Â∫îÁ≠î ============


def log_unmatched_keywords(text):
    fname = 'unmatched_keywords.json'
    try:
        with open(fname, 'r', encoding='utf8') as f:
            data = json.load(f)
    except:
        data = {}
    data[text] = data.get(text, 0) + 1
    with open(fname, 'w', encoding='utf8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def smart_match_qas(text):
    for qa in qas:
        for sub in qa.get('subcategories', []):
            for k in sub['keywords']:
                if k.lower() in text.lower():
                    reply = sub['reply']
                    return random.choice(reply) if isinstance(reply, list) else reply
    log_unmatched_keywords(text)
    return None

# ============ Êó•ÂøóËÆ∞ÂΩï ============
def save_log(uid, text, reply, tag):
    if not os.path.exists('logs'):
        os.makedirs('logs')
    fname = f'logs/log_{datetime.date.today()}.csv'
    with open(fname, 'a', newline='', encoding='utf8') as f:
        csv.writer(f).writerow([datetime.datetime.now(), uid, text, reply, tag])

def get_hook_content_by_persona(persona):
    if persona == "Â§ßÂÆ¢Êà∑":
        return f"Â∞äÊï¨ÁöÑË¥µÂÆæÔºåÊ¨¢ËøéÂä†ÂÖ•VIPÂØπÊé•Áæ§Ôºå‰∏ìÂ±ûÊíÆÂêà„ÄÅ‰ºòÂÖàÊé®ËçêÔºÅËøõÁæ§ÈìæÊé•Ôºö{VIP_GROUP_LINK}"
    elif persona == "Êé®ÂπøÂè∑":
        return f"Êé®Âπø‰∫∫‰∏ìÂ±ûÁ¶èÂà©Áæ§ÔºåËµÑÊ∫ê‰∫íÊç¢„ÄÅÂπøÂëäÂêà‰ΩúÔºåÊ¨¢ËøéÂä†ÂÖ•‰∏ªÁæ§Ôºö{GROUP_LINK}"
    elif persona == "ËµÑÊ∫ê‰∏≠‰ªã":
        return f"‰∏≠‰ªãËµÑÊ∫ê‰∏ìÂ±ûÁæ§Ôºå‰æõÈúÄÊíÆÂêà„ÄÅ‰ø°ÊÅØÂêåÊ≠•ÔºåÊ¨¢ËøéÂä†ÂÖ•‰∏ªÁæ§Ôºö{GROUP_LINK}"
    return f"Âä†ÂÖ•ËµÑÊ∫ê‰∫íÂä©‰∏ªÁæ§ÔºåÂÖçË¥πÂØπÊé•‰æõÈúÄÔºåÂêà‰Ωú‰∫§ÊµÅÔºö{GROUP_LINK}"

# ============ Ê∂àÊÅØÂ§ÑÁêÜ ============
@dp.message()
async def handle(message: types.Message):
    text = message.text.strip()
    text_clean = text.replace("Ôºö", ":").replace(" ", "").lower()
    uid = str(message.from_user.id)
    username = message.from_user.username or uid
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if "ÊàëË¶ÅËµÑÊ∫ê" in text_clean:
        await message.reply("üì¶ ËØ∑ËøõÂÖ•È¢ëÈÅì @YourChannelÔºåÊü•ÁúãÊúÄÊñ∞ËµÑÊ∫ê")
        sheet_interactions.append_row([username, text, "ËµÑÊ∫êËØ∑Ê±Ç", now])
        return

    if "ÊàëË¶ÅÂèëÂ∏É" in text_clean:
        await message.reply("üìù ËØ∑ÊåâÁÖßÊ†ºÂºèÂèëÈÄÅËµÑÊ∫êÂÜÖÂÆπÔºöÂú∞Âå∫ + Á±ªÂûã + ÂÜÖÂÆπ + ËÅîÁ≥ªÊñπÂºè")
        sheet_interactions.append_row([username, text, "ËµÑÊ∫êÂèëÂ∏ÉÊÑèÂõæ", now])
        return

    if "‰∏æÊä•" in text_clean:
        sheet_reports.append_row([username, text, classify_tag(text), now, "ÂæÖÂÆ°Ê†∏"])
        await message.reply("üì© ‰∏æÊä•‰ø°ÊÅØÂ∑≤ËÆ∞ÂΩïÔºåÊàë‰ª¨Â∞ÜÂ∞ΩÂø´Â§ÑÁêÜ„ÄÇ")
        return

    if text_clean in ['Âä†Áæ§', 'ËøõÁæ§', 'ÂÖ•Áæ§']:
        await message.reply(f"üéØ ‰∏ªÁæ§Âú∞ÂùÄÔºö{GROUP_LINK}")
        return

    if text_clean in ['‰Ω†ÊòØË∞Å', '‰Ω†Âè´Âï•', '‰Ω†Âè´‰ªÄ‰πà']:
        await message.reply("ÊàëÊòØËµÑÊ∫êÊíÆÂêàÂÆ¢ÊúçÂä©ÊâãÔºåÊ¨¢ËøéÊèêÈóÆ„ÄÇ")
        return

    if text_clean.startswith("ÂèëÂ∏É:"):
        try:
            region, res_type, content, contact = map(str.strip, text.replace("ÂèëÂ∏ÉÔºö", "").replace("ÂèëÂ∏É:", "").split("+"))
            tag = classify_tag(content + contact)
            sheet_resources.append_row([region, res_type, content, contact, tag, now])
            await message.reply("‚úÖ ËµÑÊ∫êÂ∑≤Êèê‰∫§ÔºåÁÆ°ÁêÜÂëòÂÆ°Ê†∏ÂêéÂ∞Ü‰∏äÁ∫ø„ÄÇ")
        except:
            await message.reply("Ê†ºÂºèÈîôËØØÔºåÊ≠£Á°ÆÊ†ºÂºèÔºöÂèëÂ∏ÉÔºöÂú∞Âå∫ + Á±ªÂûã + ÂÜÖÂÆπ + ËÅîÁ≥ªÊñπÂºè")
        return

    ans = smart_match_qas(text)
    if ans:
        await message.reply(ans)
        return

    msgs = user_history.get(uid, [])
    msgs.append({"role": "user", "content": text})
    if len(msgs) > 10:
        msgs = msgs[-10:]
    try:
        reply = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=msgs,
            temperature=0.7
        ).choices[0].message.content
    except Exception as e:
        reply = f"AIÈîôËØØÔºö{e}"

    msgs.append({"role": "assistant", "content": reply})
    user_history[uid] = msgs
    await message.reply(reply)
    save_log(uid, text, reply, classify_persona(text))

# ============ Webhook ÂêØÂä® ============
async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()

def create_app():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    return app

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = create_app()
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
